package mydlinkddd;

import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;


public class Dddmapper extends Mapper<Object, Text, Text, Text> {
	int a;
	 public static int hash(byte[] data, int seed) {
		    int m = 0x5bd1e995;
		    int r = 24;

		    int h = seed ^ data.length;

		    int len = data.length;
		    int len_4 = len >> 2;

		    for (int i = 0; i < len_4; i++) {
		      int i_4 = i << 2;
		      int k = data[i_4 + 3];
		      k = k << 8;
		      k = k | (data[i_4 + 2] & 0xff);
		      k = k << 8;
		      k = k | (data[i_4 + 1] & 0xff);
		      k = k << 8;
		      k = k | (data[i_4 + 0] & 0xff);
		      k *= m;
		      k ^= k >>> r;
		      k *= m;
		      h *= m;
		      h ^= k;
		    }

		    int len_m = len_4 << 2;
		    int left = len - len_m;

		    if (left != 0) {
		      if (left >= 3) {
		        h ^= (int) data[len - 3] << 16;
		      }
		      if (left >= 2) {
		        h ^= (int) data[len - 2] << 8;
		      }
		      if (left >= 1) {
		        h ^= (int) data[len - 1];
		      }

		      h *= m;
		    }

		    h ^= h >>> 13;
		    h *= m;
		    h ^= h >>> 15;

		    return h;
		  }
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
    	
    	 String splitsym ="^";
    	 String inputStr = value.toString();
    	 
    	 Cutstr g01 = new Cutstr(inputStr, "logtime=");
    	 Cutstr g02 = new Cutstr(inputStr, "no=");
    	 Cutstr g03 = new Cutstr(inputStr, "id=");
    	 Cutstr g04 = new Cutstr(inputStr, "type=");
    	 Cutstr g05 = new Cutstr(inputStr, "state=");
    	 Cutstr g06 = new Cutstr(inputStr, "status=");
    	 Cutstr g07 = new Cutstr(inputStr, "ctype=");
    	 Cutstr g08 = new Cutstr(inputStr, "browser=");
    	 
    	 
    	
    	 String s = g01.exchange(splitsym)+g02.exchange(splitsym);
    	 byte[] bytes = null;
    	 try {
    		 bytes = Hex.decodeHex(s.replaceAll("\\D", "").toCharArray());
    		 } catch (DecoderException e) {
    			 System.out.println(s.replaceAll("\\D", "")+" ");
    			 e.printStackTrace();
    			 }
    	 
    	 Text wordK = new Text();
    	 Text wordV = new Text();
    	 String outdata = "";
    	 String swapdata = "";
    	 wordK.set(Integer.toHexString(hash(bytes, 2)));       	 

    	 String patternStr =".+\\s(\\d{2})\\:.+";
    	 Pattern pattern = Pattern.compile(patternStr);
    	 Matcher matcher = pattern.matcher(inputStr);
    	 boolean matchFound = matcher.find();
         if(matchFound==true)
    	 swapdata=matcher.group(1).toString(); 
    	 outdata = swapdata+"	"+g02.exchange(splitsym)+"	"+g03.exchange(splitsym)+"	"+g04.exchange(splitsym)+"	"+g05.exchange(splitsym)+"	"+g06.exchange(splitsym)+"	"+g07.exchange(splitsym)+"	"+g08.exchange(" ");
    	   	

    	 wordV.set(outdata);
    	 context.write(wordK, wordV);
 
             

    	//System.out.println("error");
    }
}

